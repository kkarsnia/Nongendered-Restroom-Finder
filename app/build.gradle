apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
  compileSdkVersion rootProject.compileSdkVersion
  buildToolsVersion "30.0.1"

  dataBinding {
    enabled = true
  }

  defaultConfig {
    applicationId "com.kkco.nongenderedrestroomfinder"
    minSdkVersion 23
    targetSdkVersion 30
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    debug {
      testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  // work-runtime-ktx 2.1.0 and above now requires Java 8
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

dependencies {
  implementation fileTree(dir: "libs", include: ["*.jar"])
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.kotlinVersion"
  implementation 'androidx.core:core-ktx:1.3.1'
  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
  implementation "com.google.android.material:material:$rootProject.materialVersion"
  implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
  implementation "com.google.android.material:material:$rootProject.materialVersion"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlinVersion"
  implementation "androidx.paging:paging-runtime:$rootProject.pagingVersion"
  implementation "androidx.work:work-runtime-ktx:$rootProject.workVersion"

  // Coroutines
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"

  // Room
  implementation "androidx.room:room-runtime:$rootProject.roomVersion"
  implementation "androidx.room:room-ktx:$rootProject.roomVersion"
  kapt "androidx.room:room-compiler:$rootProject.roomVersion"

  // Navigation
//  implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
//  implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"

  // Lifecycle
  implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"

  // Google Maps & Location
  implementation 'com.google.android.gms:play-services-maps:17.0.0'
  implementation 'com.google.android.gms:play-services-location:17.0.0'
  implementation 'com.google.maps.android:maps-utils-ktx:2.1.1'

  // Dagger
  kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
  kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"
  implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
  implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
  implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"

  // Networking
  implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
  implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
  implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit"
  implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttp"
  implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttp"

  // Tools
  implementation "com.jakewharton.timber:timber:4.7.1"
  implementation "com.facebook.stetho:stetho:$rootProject.stetho"
  implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.stetho"
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'

  // Testing
  testImplementation "junit:junit:$rootProject.junitVersion"
  testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.mockwebserverVersion"
  testImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
  testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"

  androidTestImplementation "androidx.test:core:$rootProject.testCoreVersion"
  androidTestImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
  androidTestImplementation "androidx.test:rules:$rootProject.testRulesVersion"

  androidTestImplementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
  androidTestImplementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
  androidTestImplementation "com.google.android.material:material:$rootProject.materialVersion"

  androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"
  androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
  androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
  androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
  androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
  androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"

  androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
  androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
  androidTestImplementation "org.mockito:mockito-android:$rootProject.mockitoAndroidVersion"

}

//task fullCoverageReport(type: JacocoReport) {
//  dependsOn 'createDebugCoverageReport'
//  dependsOn 'testDebugUnitTest'
//  reports {
//    xml.enabled = true
//    html.enabled = true
//  }
//
//  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
//                    '**/*Test*.*', 'android/**/*.*',
//                    '**/*_MembersInjector.class',
//                    '**/Dagger*Component.class',
//                    '**/Dagger*Component$Builder.class',
//                    '**/*_*Factory.class',
//                    '**/*ComponentImpl.class',
//                    '**/*SubComponentBuilder.class']
//  def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//  def mainSrc = "${project.projectDir}/src/main/java"
//
//  sourceDirectories = files([mainSrc])
//  classDirectories = files([debugTree])
//  executionData = fileTree(dir: "$buildDir", includes: [
//          "jacoco/testDebugUnitTest.exec",
//          "outputs/code-coverage/connected/*coverage.ec"
//  ])
//}
//
//// we need all open to run tests which  a we enable only for debug builds.
//project.tasks.whenTaskAdded {
//  if (it.name == "testReleaseUnitTest") {
//    it.enabled = false
//  }
//}